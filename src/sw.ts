import { precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate, NetworkFirst, NetworkOnly } from 'workbox-strategies';
import { CacheableResponsePlugin } from 'workbox-cacheable-response';
import { ExpirationPlugin } from 'workbox-expiration';
// A linha 'import type { NetworkOnlyOptions, StaleWhileRevalidateOptions, NetworkFirstOptions } from 'workbox-strategies';' foi removida.

/// <reference lib="webworker" />
declare const self: ServiceWorkerGlobalScope;

// This is the placeholder for the precache manifest generated by vite-plugin-pwa
// All your build assets (JS, CSS, HTML, images) will be listed here.
precacheAndRoute(self.__WB_MANIFEST);

// Cache HTML pages with NetworkOnly strategy (as configured in vite.config.ts)
registerRoute(
  ({ url }) => url.pathname === '/',
  new NetworkOnly({
    cacheName: 'html-network-only',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
    ],
  })
);

// Cache static assets (JS, CSS, images, etc.) with StaleWhileRevalidate strategy
registerRoute(
  /\.(?:js|css|html|ico|png|svg|jpg|jpeg|gif|webp)$/i,
  new StaleWhileRevalidate({
    cacheName: 'assets-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 60 * 60 * 24 * 7, // 7 days
      }),
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
    ],
  })
);

// Cache Supabase API calls with NetworkFirst strategy
registerRoute(
  ({ url }) => url.origin === 'https://rrwtsnecjuugqlwmpgzd.supabase.co',
  new NetworkFirst({
    cacheName: 'supabase-api-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 20,
        maxAgeSeconds: 60 * 5, // 5 minutes
      }),
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
    ],
  })
);

// Ensure that the service worker takes control of the page as soon as it's activated
self.addEventListener('install', () => {
  self.skipWaiting();
});

self.addEventListener('activate', () => {
  self.clients.claim();
});